// CanvasRoot3.jsx

import { Canvas, useThree, useFrame } from "@react-three/fiber";
import { useEffect, useState, useRef, useMemo } from "react";
import * as THREE from "three";

import SceneContent3 from "./SceneContent3";
import GuiPanelRoot from "./GuiPanelRoot";
import PostProcessing3 from "./PostProcessing3";
import BeamEffect from "./BeamEffect";
import CameraController from "./CameraController";
import BloomPostProcessing from "./BloomPostProcessing";
import LoaderOverlay from "../LoaderOverlay";
import { useBeamStore } from "@/store/useBeamStore";

// „Ç∞„É≠„Éº„Éê„É´„Éï„É©„Ç∞„ÅßÊºîÂá∫„ÅÆÈáçË§áÂÆüË°å„ÇíÈò≤„Åê
let globalToneMappingStartTime = null;
let isGlobalToneMappingActive = false;

// üîß exposure „ÅÆ„Ç¢„Éã„É°„Éº„Ç∑„Éß„É≥ÁÆ°ÁêÜ
function ToneMappingController() {
  const { gl, scene } = useThree();
  const startTimeRef = useRef(null);
  const isActiveRef = useRef(true);

  useEffect(() => {
    // „Çà„ÇäÁ¢∫ÂÆü„Å´„É¨„É≥„ÉÄ„É©„ÉºË®≠ÂÆö„ÇíÈÅ©Áî®
    gl.toneMapping = THREE.ACESFilmicToneMapping;
    gl.toneMappingExposure = 0.0;  // ÂàùÊúüÂÄ§„Çí„Çº„É≠„Å´
    gl.outputColorSpace = THREE.SRGBColorSpace;
    
    // „Ç∑„Éº„É≥„ÇÇÂêåÊßò„Å´Ë®≠ÂÆö
    scene.background = new THREE.Color(0x000000);  // ÂÆåÂÖ®„Å´Èªí„ÅÑËÉåÊôØ
    
    // „Ç∞„É≠„Éº„Éê„É´Âà∂Âæ°„Åß‰∏ÄÂ∫¶„Å†„ÅëÈñãÂßã
    if (!isGlobalToneMappingActive) {
      globalToneMappingStartTime = performance.now();
      isGlobalToneMappingActive = true;
      startTimeRef.current = globalToneMappingStartTime;
      console.log("üü¢ ToneMapping ÂàùÊúüÂåñÂÆå‰∫Ü - 13ÁßíÊºîÂá∫ÈñãÂßã („Ç∞„É≠„Éº„Éê„É´Âà∂Âæ°)", { 
        startTime: startTimeRef.current,
        initialExposure: gl.toneMappingExposure,
        renderer: gl,
        toneMapping: gl.toneMapping
      });
    } else {
      startTimeRef.current = globalToneMappingStartTime;
      console.log("üîÑ ToneMapping Êó¢Â≠ò„Ç§„É≥„Çπ„Çø„É≥„ÇπÊ§úÂá∫ - Á∂ôÁ∂ö", {
        existingStartTime: globalToneMappingStartTime
      });
    }
    
    isActiveRef.current = true;

    // „ÇØ„É™„Éº„É≥„Ç¢„ÉÉ„ÉóÈñ¢Êï∞
    return () => {
      isActiveRef.current = false;
      console.log("üîÑ ToneMappingController „ÇØ„É™„Éº„É≥„Ç¢„ÉÉ„Éó");
    };
  }, [gl, scene]);

  useFrame(() => {
    if (!startTimeRef.current || !isActiveRef.current) return;

    const elapsed = performance.now() - startTimeRef.current;
    const exposureDuration = 13000;  // 13ÁßíÈñì„ÅÆÊºîÂá∫
    const exposureTarget = 0.4;      // ÁôΩÈ£õ„Å≥„ÇíÈò≤„Åê„Åü„ÇÅ„Çà„ÇäÊéß„Åà„ÇÅ„Å´

    // „Ç§„Éº„Ç∫„Ç§„É≥Èñ¢Êï∞Ôºà‰∫åÊ¨°Èñ¢Êï∞ - ÊúÄÂàùÈÄü„Åè„ÄÅÂæå„ÅßÁ∑©„ÇÑ„ÅãÔºâ
    const easeInQuad = (t) => t * t;

    if (elapsed < exposureDuration) {
      const progress = elapsed / exposureDuration;
      const newExposure = THREE.MathUtils.lerp(
        0,
        exposureTarget,
        easeInQuad(progress)
      );
      
      // „Çà„ÇäÁ¢∫ÂÆü„Å´Ë®≠ÂÆö
      gl.toneMappingExposure = newExposure;
      
      // „Éá„Éê„ÉÉ„Ç∞„É≠„Ç∞ÔºàÊØé„Éï„É¨„Éº„É†Âá∫Âäõ„Åó„Å¶Á¢∫ÂÆü„Å´Âãï‰ΩúÁ¢∫Ë™çÔºâ
      if (Math.floor(elapsed / 500) % 2 === 0 && elapsed % 500 < 16.67) {
        console.log(`üåÖ ToneMappingÈÄ≤Ë°å‰∏≠ („Ç§„Éº„Ç∫„Ç§„É≥): ${(elapsed/1000).toFixed(1)}s / ${exposureDuration/1000}s`, {
          progress: (progress * 100).toFixed(1) + '%',
          exposure: newExposure.toFixed(3),
          glExposure: gl.toneMappingExposure,
          easing: 'ease-in'
        });
      }
    } else {
      gl.toneMappingExposure = exposureTarget;
      if (elapsed - exposureDuration < 100) { // ‰∏ÄÂ∫¶„Å†„Åë„É≠„Ç∞Âá∫Âäõ
        console.log("‚úÖ ToneMappingÊºîÂá∫ÂÆå‰∫Ü („Ç§„Éº„Ç∫„Ç§„É≥)", { 
          finalExposure: gl.toneMappingExposure,
          totalTime: (elapsed/1000).toFixed(1) + 's',
          easing: 'ease-in'
        });
        // ÊºîÂá∫ÂÆå‰∫ÜÂæå„ÅØ„Ç∞„É≠„Éº„Éê„É´„Éï„É©„Ç∞„Çí„É™„Çª„ÉÉ„ÉàÔºàÊ¨°Âõû„ÅÆ„Åü„ÇÅ„Å´Ôºâ
        setTimeout(() => {
          isGlobalToneMappingActive = false;
          globalToneMappingStartTime = null;
        }, 1000);
      }
    }
  });

  return null;
}

// ‚úÖ Cone „ÅÆ‰ΩçÁΩÆ„ÇíÂèñÂæó„Åó„Å¶ state „Å´ÂèçÊò†„Åô„Çã Tracker
function BeamOriginTracker({ modelRef, setBeamPosition, setIsModelReady }) {
  const frameCount = useRef(0);
  const lastPosition = useRef(null);
  const hasLoggedMaxFrames = useRef(false);

  useFrame(() => {
    frameCount.current += 1;
    
    if (frameCount.current > 30 && !hasLoggedMaxFrames.current) {
      console.log("üîö [BeamOriginTracker] Stopping logs after 30 frames");
      hasLoggedMaxFrames.current = true;
    }
    
    if (modelRef.current) {
      let coneMesh = null;
      
      // Cone „É°„ÉÉ„Ç∑„É•„ÇíÊé¢Á¥¢
      modelRef.current.traverse((child) => {
        if (child.isMesh && (
          child.name === "Cone_Color_0" || 
          child.name.includes("Cone") || 
          child.name.includes("Star")
        )) {
          coneMesh = child;
          if (frameCount.current <= 30) {
            console.log("üéØ Found target mesh:", child.name);
          }
        }
      });
      
      if (coneMesh) {
        setIsModelReady(true);
        
        // „ÉØ„Éº„É´„Éâ‰ΩçÁΩÆ„Å®„ÉØ„Éº„É´„Éâ„Éû„Éà„É™„ÉÉ„ÇØ„Çπ„ÇíÂèñÂæó
        const worldPos = new THREE.Vector3();
        coneMesh.updateWorldMatrix(true, false);
        coneMesh.getWorldPosition(worldPos);
        
        if (!lastPosition.current || !worldPos.equals(lastPosition.current)) {
          lastPosition.current = worldPos.clone();
          setBeamPosition(worldPos);
          if (frameCount.current <= 30) {
            console.log("üìç [BeamOriginTracker] Position updated:", {
              meshName: coneMesh.name,
              worldPosition: worldPos.toArray(),
              localPosition: coneMesh.position.toArray(),
              matrix: coneMesh.matrix.elements,
              frame: frameCount.current
            });
          }
        }
      } else if (frameCount.current <= 30 && frameCount.current % 10 === 0) {
        console.log("‚è≥ [BeamOriginTracker] Waiting for cone mesh...", {
          frame: frameCount.current,
          hasModelRef: !!modelRef.current
        });
      }
    }
  });

  return null;
}

export default function CanvasRoot3() {
  const modelRef = useRef();
  const cameraControllerRef = useRef();
  const bloomRef = useRef();

  // Loading state management
  const [isLoading, setIsLoading] = useState(true);
  const [loadingProgress, setLoadingProgress] = useState(0);

  // „Éì„Éº„É†Áä∂ÊÖãÁÆ°ÁêÜ
  const [beamPosition, setBeamPosition] = useState(null);
  const [isModelReady, setIsModelReady] = useState(false);
  const [shouldShowBeams, setShouldShowBeams] = useState(false);
  const [beamVisible, setBeamVisible] = useState(false);

  // GUIÁä∂ÊÖã
  const [emissiveIntensity, setEmissiveIntensity] = useState(7);

  // „Éì„Éº„É†„Éá„Éº„ÇøË®àÁÆó
  const { greenBeamData, orangeBeamData } = useMemo(() => {
    if (!beamPosition) {
      return {
        greenBeamData: { start: new THREE.Vector3(), end: new THREE.Vector3() },
        orangeBeamData: { start: new THREE.Vector3(), end: new THREE.Vector3() }
      };
    }

    return {
      greenBeamData: {
        start: beamPosition.clone(),
        end: beamPosition.clone().add(new THREE.Vector3(50, 10, 20))
      },
      orangeBeamData: {
        start: beamPosition.clone(),
        end: beamPosition.clone().add(new THREE.Vector3(45, 15, 25))
      }
    };
  }, [beamPosition]);

  // „Éì„Éº„É†Ë°®Á§∫„ÅÆÈÅÖÂª∂Âà∂Âæ°
  useEffect(() => {
    if (isModelReady && !isLoading) {
      const timer = setTimeout(() => {
        setShouldShowBeams(true);
      }, 15000); // 15ÁßíÂæå„Å´„Éì„Éº„É†Ë°®Á§∫ÈñãÂßã

      return () => clearTimeout(timer);
    }
  }, [isModelReady, isLoading]);

  // „É≠„Éº„Éá„Ç£„É≥„Ç∞ÈÄ≤Êçó„Ç∑„Éü„É•„É¨„Éº„Ç∑„Éß„É≥ÔºàÂÆüÈöõ„ÅÆ„Ç¢„Çª„ÉÉ„ÉàË™≠„ÅøËæº„Åø„Å´Âêà„Çè„Åõ„Å¶Ë™øÊï¥ÂèØËÉΩÔºâ
  useEffect(() => {
    let progressTimer;
    let currentProgress = 0;

    const updateProgress = () => {
      currentProgress += Math.random() * 15 + 5; // „É©„É≥„ÉÄ„É†„Å´5-20%„Åö„Å§Â¢óÂä†
      
      if (currentProgress >= 100) {
        currentProgress = 100;
        setLoadingProgress(100);
        clearInterval(progressTimer);
      } else {
        setLoadingProgress(Math.floor(currentProgress));
        progressTimer = setTimeout(updateProgress, 200 + Math.random() * 300); // 200-500msÈñìÈöî
      }
    };

    // ÂàùÊúüÈÅÖÂª∂Âæå„Å´ÈÄ≤ÊçóÈñãÂßã
    const initialTimer = setTimeout(updateProgress, 300);

    return () => {
      clearTimeout(initialTimer);
      if (progressTimer) clearTimeout(progressTimer);
    };
  }, []);

  // „É≠„Éº„Éá„Ç£„É≥„Ç∞ÂÆå‰∫ÜÊôÇ„ÅÆÂá¶ÁêÜ
  const handleLoadingComplete = () => {
    console.log("üé¨ „É≠„Éº„Éá„Ç£„É≥„Ç∞ÂÆå‰∫Ü - „Ç¢„Éó„É™„Ç±„Éº„Ç∑„Éß„É≥ÈñãÂßã");
    setIsLoading(false);
  };

  const createBeam = useBeamStore((state) => state.createBeam);

  return (
    <>
      {/* „É≠„Éº„Éá„Ç£„É≥„Ç∞„Ç™„Éº„Éê„Éº„É¨„Ç§ */}
      {isLoading && (
        <LoaderOverlay 
          progress={loadingProgress} 
          onLoadingComplete={handleLoadingComplete}
        />
      )}

      <Canvas
        gl={{ 
          antialias: true,
          toneMapping: THREE.ACESFilmicToneMapping,
          toneMappingExposure: 0.0,
          outputColorSpace: THREE.SRGBColorSpace
        }}
        camera={{ position: [-180, 5, -50], fov: 75 }}
        style={{ width: "100%", height: "100vh", background: "black" }}
        onCreated={({ gl, scene }) => {
          // Canvas‰ΩúÊàêÊôÇ„Å´Á¢∫ÂÆü„Å´Ë®≠ÂÆö
          gl.toneMapping = THREE.ACESFilmicToneMapping;
          gl.toneMappingExposure = 0.0;
          gl.outputColorSpace = THREE.SRGBColorSpace;
          scene.background = new THREE.Color(0x000000);
          console.log("üé¨ CanvasÂàùÊúüÂåñ: „É¨„É≥„ÉÄ„É©„ÉºË®≠ÂÆöÂÆå‰∫Ü", {
            toneMapping: gl.toneMapping,
            toneMappingExposure: gl.toneMappingExposure,
            outputColorSpace: gl.outputColorSpace
          });
        }}
      >
        <ToneMappingController />
        <SceneContent3 modelRef={modelRef} />
        <PostProcessing3 />

        <BeamOriginTracker
          modelRef={modelRef}
          setBeamPosition={setBeamPosition}
          setIsModelReady={setIsModelReady}
        />

        {shouldShowBeams && (
          <>
            <BeamEffect
              type="green"
              start={greenBeamData.start}
              end={greenBeamData.end}
              visible={beamVisible}
              alpha={1.5}
            />
            <BeamEffect
              type="orange"
              start={orangeBeamData.start}
              end={orangeBeamData.end}
              visible={beamVisible}
              alpha={1.5}
            />
          </>
        )}

        <CameraController ref={cameraControllerRef} />

        <BloomPostProcessing ref={bloomRef} emissiveIntensity={emissiveIntensity} />

        <GuiPanelRoot
          createBeam={createBeam}
          beamVisible={beamVisible}
          setBeamVisible={setBeamVisible}
          modelRef={modelRef}
          cameraControllerRef={cameraControllerRef}
          bloomRef={bloomRef}
          onEmissiveIntensityChange={setEmissiveIntensity}
          isLoading={isLoading}
        />
      </Canvas>
    </>
  );
}

